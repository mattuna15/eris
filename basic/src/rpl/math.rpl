
; *****************************************************************************
; *****************************************************************************
;
;		Name:		math.rpl
;		Purpose:	RPL Binary Math routines
;		Created:	15th April 2020
;		Reviewed: 	TODO
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;									+
;
; *****************************************************************************

.RPL_Add 	;; [+] 
		ldm 	r1,r8,#0
		inc 	r8
		add 	r0,r1,#0
		ret

; *****************************************************************************
;
;									*
;
; *****************************************************************************

.RPL_Mult 	;; [*] 
		ldm 	r1,r8,#0
		inc 	r8
		mult 	r0,r1,#0
		ret

; *****************************************************************************
;
;									-
;
; *****************************************************************************

.RPL_Sub 	;; [-] 
		mov 	r1,r0,#0
		ldm 	r0,r8,#0
		inc 	r8
		sub 	r0,r1,#0
		ret

; *****************************************************************************
;
;									/
;
; *****************************************************************************

.RPL_Divide ;; [/] 
		mov 	r1,r0,#0
		ldm 	r0,r8,#0
		inc 	r8
		sknz 	r1
		jmp 	#DivideZeroError
		jmp 	#OSSDivide16	

; *****************************************************************************
;
;								mod
;
; *****************************************************************************

.RPL_Modulus ;; [mod] 
		mov 	r1,r0,#0
		ldm 	r0,r8,#0
		inc 	r8
		sknz 	r1
		jmp 	#DivideZeroError
		push 	link
		jsr 	#OSSDivide16	
		mov 	r0,r1,#0
		pop 	link
		ret

; *****************************************************************************
;
;									and
;
; *****************************************************************************

.RPL_And 	;; [and] 
		ldm 	r1,r8,#0
		inc 	r8
		and 	r0,r1,#0
		ret

; *****************************************************************************
;
;									xor
;
; *****************************************************************************

.RPL_Xor 	;; [xor] 
		ldm 	r1,r8,#0
		inc 	r8
		xor 	r0,r1,#0
		ret

; *****************************************************************************
;
;									or
;
; *****************************************************************************

.RPL_Or 	;; [or] 
		mov 	r2,#-1
		ldm 	r1,r8,#0
		inc 	r8
		xor 	r0,r2,#0
		xor 	r1,r2,#0
		and 	r0,r1,#0
		xor 	r0,r2,#0
		ret

; *****************************************************************************
;
;								   min/max
;
; *****************************************************************************

.RPL_Min 	;; [min] 
		ldm 	r1,r8,#0
		add 	r0,#$8000
		add 	r1,#$8000
		inc 	r8
		sub 	r0,r1,#0
		sklt 	
		mov 	r0,r1,#0
		skge
		add 	r0,r1,#0
		sub 	r0,#$8000
		ret

.RPL_Max 	;; [max] 
		ldm 	r1,r8,#0
		add 	r0,#$8000
		add 	r1,#$8000
		inc 	r8
		sub 	r0,r1,#0
		skge 	
		mov 	r0,r1,#0
		sklt
		add 	r0,r1,#0
		sub 	r0,#$8000
		ret
