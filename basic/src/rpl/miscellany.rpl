
; *****************************************************************************
; *****************************************************************************
;
;		Name:		stack.rpl
;		Purpose:	RPL Stack routines
;		Created:	15th April 2020
;		Reviewed: 	TODO
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;							Compile a break to debugger
;
; *****************************************************************************
;;
;;	(-)
;;	Compiles a break into the code.
;;
.RPL_Break  ;; [break] *
		push 	link
		clr 	r0
		jsr 	#AsmWord		
		pop 	link
		ret

; *****************************************************************************
;
;									Print TOS
;
; *****************************************************************************
;;
;;	(n - )
;;	Print the top value of the stack in signed decimal
;;
.RPL_Dot ;; [.]
		push 	link
		mov 	r1,r0,#0
		mov 	r0,#32
		jsr 	#OSPrintCharacter
		mov 	r0,r1,#0
		mov		r1,#$800A					; signed decimal format
		jsr 	#OSIntToStr 				; convert it
		jsr 	#OSPrintString 				; print it
		pop 	link
		jmp 	#RPL_Drop
		
; *****************************************************************************
;
;									Emit
;
; *****************************************************************************
;;
;;	(n - )
;;	Output the top of the stack are a character
;;
.RPL_Emit 	;; [emit]
		push 	link
		jsr 	#OSPrintCharacter
		pop 	link
		jmp 	#RPL_Drop

; *****************************************************************************
;
;									CR
;
; *****************************************************************************
;;
;;	( - )
;;	Print a carriage return 
;;
.RPL_Cr 	;; [cr]
		push 	r0,link
		mov 	r0,#13
		jsr 	#OSPrintCharacter
		pop 	r0,link
		ret

; *****************************************************************************
;
;									Sys
;
; *****************************************************************************
;;
;;	(<params> count address - r0)
;;	Calls routine address, with count parameters which are pushed on the stack 
;;	backwards (e.g. R3v R2v R1v R0v 4 code.address SYS) ; these are loaded into
;;	R0-R4. The value in R0 on return is put on the top of the stack
;;
.RPL_Sys 	;; [sys]
		push 	link
		mov 	r7,r0,#0 					; call address in R0
		ldm 	r6,r8,#0 					; this is the number to drop off the stack
		ldm 	r0,r8,#1 					; load R0-R4
		ldm 	r1,r8,#2
		ldm 	r2,r8,#3
		ldm 	r3,r8,#4
		ldm 	r4,r8,#5
		add 	r8,r6,#1 					; fix up stack, and return result in TOS
		brl 	link,r7,#0 					; call routine
		pop 	link
		ret

.RPL_Dot1 ;; [,] *
.RPL_Dot2 ;; [&] *
.RPL_Dot3 ;; [%] *
		ret
		
