
; *****************************************************************************
; *****************************************************************************
;
;		Name:		stack.rpl
;		Purpose:	RPL Stack routines
;		Created:	15th April 2020
;		Reviewed: 	TODO
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;									DUP
;
; *****************************************************************************
;;
;;	(n - n n)
;;	Duplicate the top value on the stack
;;
.RPL_Dup 	;; [dup]
		dec 	r8
		stm 	r0,r8,#0
		ret

; *****************************************************************************
;
;									NIP
;
; *****************************************************************************
;;
;;	(m n - n)
;;	Drop the second element on the stack
;;
.RPL_Nip 	;; [nip]
		inc 	r8
		ret

; *****************************************************************************
;
;								   DROP
;
; *****************************************************************************
;;
;;	(m n - m)
;;	Drop the top of the stack
;;
.RPL_Drop ;; [drop]
		ldm 	r0,r8,#0
		inc 	r8
		ret

; *****************************************************************************
;
;								   SWAP
;
; *****************************************************************************
;;
;;	(m n - n m)
;;	Swap the top two values on the stack
;;
.RPL_Swap ;; [swap]
		ldm 	r1,r8,#0
		stm 	r0,r8,#0
		mov 	r0,r1,#0
		ret

; *****************************************************************************
;
;								   OVER
;
; *****************************************************************************
;;
;;	(m n - m n m)
;;	Copy the second value on the stack to the top of the stack.
;;
.RPL_Over ;; [over]
		ldm 	r1,r8,#0
		dec 	r8
		stm 	r0,r8,#0
		mov 	r0,r1,#0
		ret

; *****************************************************************************
;
;								   ROT
;
; *****************************************************************************
;;
;;	( n1 n2 n3 â€” n2 n3 n1 )
;;	Rotate the third item on the stack to the top
;;
.RPL_Rot ;; [rot]
		ldm 	r1,r8,#1
		ldm 	r2,r8,#0
		stm 	r2,r8,#1
		stm 	r0,r8,#0
		mov 	r0,r1,#0
		ret

