; *****************************************************************************
; *****************************************************************************
;
;		Name:		unary.rpl
;		Purpose:	RPL Unary Math routines
;		Created:	15th April 2020
;		Reviewed: 	TODO
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;							0- (2's complement)
;
; *****************************************************************************
;;
;;	(n - -n)
;;	Negate the top of the stack
;;
.RPL_Negate ;; [0-]
		xor 	r0,#$FFFF
		inc 	r0
		ret
; *****************************************************************************
;
;							NOT (1's complement)
;
; *****************************************************************************

;;
;;	(n - ~n)
;;	Binary not (1's complement) the top of the stack
;;
.RPL_Not 	;; [not]
		xor 	r0,#$FFFF
		ret

; *****************************************************************************
;
;									BSWAP
;
; *****************************************************************************
;;
;;	(n - b)
;;	Swap the upper and lower byte of the top of the stack
;;
.RPL_BSwap 	;; [bswap]
		ror 	r0,#8
		ret

; *****************************************************************************
;
;									<<
;
; *****************************************************************************
;;	
;;	(n - m)
;;	Shift the top of the stack left
;;
.RPL_Shl 	;; [<<]
		add	 	r0,r0,#0
		ret

; *****************************************************************************
;
;									>>
;
; *****************************************************************************
;;	
;;	(n - m)
;;	Shift the top of the stack right logically (so bit 15 is always clear)
;;
.RPL_Shr 	;; [>>]
		ror 	r0,#1
		and 	r0,#$7FFF
		ret

; *****************************************************************************
;
;									++
;
; *****************************************************************************
;;
;;	(n - m)
;;	Increment the top of the stack
;;
.RPL_Inc 	;; [++]
		inc 	r0
		ret

; *****************************************************************************
;
;									--
;
; *****************************************************************************
;;
;;	(n - m)
;;	Decrement the top of the stack
;;
.RPL_Dec 	;; [--]
		dec 	r0
		ret
