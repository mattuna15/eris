
; *****************************************************************************
; *****************************************************************************
;
;		Name:		compare.rpl
;		Purpose:	RPL Integer Comparison routines
;		Created:	15th April 2020
;		Reviewed: 	TODO
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;									0=
;
; *****************************************************************************
;;
;; 	(n - t)
;;	Check the top of the stack ; drop the value ; if zero push -1 , if non zero push false
;;

.RPL_EqualZero 	;; [0=]
		break
		mov 	r1,r0,#0
		clr 	r0
		sknz 	r1
		dec 	r0
		ret

; *****************************************************************************
;
;									0<
;
; *****************************************************************************
;;
;; 	(n - t)
;;	Check the top of the stack ; drop the value ; 
;;	if less than zero push -1 , if non zero push false
;;
.RPL_LessZero 	;; [0<]
		mov 	r1,r0,#0
		clr 	r0
		skp 	r1
		dec 	r0
		ret

; *****************************************************************************
;
;									=
;
; *****************************************************************************
;;
;; 	(n1 n2 - t)
;;	Compare the top two stack values and drop both, replacing them with -1
;; 	if the second value on the stack is equal to the first
;;
.RPL_Equal ;; [=]
		ldm 	r1,r8,#0
		inc 	r8
		xor 	r0,r1,#0
		skz 	r0
		jmp 	#_RPLFalse
		mov 	r0,#-1
		ret
._RPLFalse
		clr 	r0
		ret

; *****************************************************************************
;
;									<>
;
; *****************************************************************************

;;
;; 	(n1 n2 - t)
;;	Compare the top two stack values and drop both, replacing them with -1
;; 	if the second value on the stack is not equal to the first
;;
.RPL_NotEqual ;; [<>]
		ldm 	r1,r8,#0
		inc 	r8
		xor 	r0,r1,#0
		skz 	r0
		mov 	r0,#-1
		ret

; *****************************************************************************
;
;								< >= handler
;
; *****************************************************************************
;;
;; 	(n1 n2 - t)
;;	Compare the top two stack values and drop both, replacing them with -1
;; 	if the second value on the stack is greater than or equal to the first
;;

.RPL_GreaterEqual ;; [>=]
		mov 	r2,#-1
		sknz 	r2
;;
;; 	(n1 n2 - t)
;;	Compare the top two stack values and drop both, replacing them with -1
;; 	if the second value on the stack is less than the first
;;
.RPL_Less ;; [<]	
		clr 	r2	
		mov 	r1,r0,#0
		ldm 	r0,r8,#0
		;
		;		At this point testing r0 < r1. R2 is applied to result. R8 not incremented yet
._RPLCompare
		inc 	r8 							; pop R8 off stack
		add 	r0,#$8000					; signed comparison
		add 	r1,#$8000		
		sub 	r0,r1,#0					; compare
		sklt 
		clr 	r0 							; carry to R0
		skge
		mov 	r0,#-1
		xor 	r0,r2,#0 					; flip it
		ret

; *****************************************************************************
;
;								> <= handler
;
; *****************************************************************************
;;
;; 	(n1 n2 - t)
;;	Compare the top two stack values and drop both, replacing them with -1
;; 	if the second value on the stack is less than or equal to the first
;;
.RPL_LessEqual ;; [<=]
		mov 	r2,#-1
		sknz 	r2
;;
;; 	(n1 n2 - t)
;;	Compare the top two stack values and drop both, replacing them with -1
;; 	if the second value on the stack is greater than the first
;;
.RPL_Greater ;; [>]
		clr 	r2
		ldm 	r1,r8,#0
		jmp 	#_RPLCompare

